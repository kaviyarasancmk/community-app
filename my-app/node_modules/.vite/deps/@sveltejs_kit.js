import "./chunk-2B2CG5KL.js";

// node_modules/@sveltejs/kit/src/runtime/control.js
var HttpError = class {
  /**
   * @param {number} status
   * @param {{message: string} extends App.Error ? (App.Error | string | undefined) : App.Error} body
   */
  constructor(status, body) {
    this.status = status;
    if (typeof body === "string") {
      this.body = { message: body };
    } else if (body) {
      this.body = body;
    } else {
      this.body = { message: `Error: ${status}` };
    }
  }
  toString() {
    return JSON.stringify(this.body);
  }
};
var Redirect = class {
  /**
   * @param {300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308} status
   * @param {string} location
   */
  constructor(status, location) {
    this.status = status;
    this.location = location;
  }
};
var ActionFailure = class {
  /**
   * @param {number} status
   * @param {T} [data]
   */
  constructor(status, data) {
    this.status = status;
    this.data = data;
  }
};

// node_modules/esm-env/dev-browser.js
var BROWSER = true;
var DEV = true;

// node_modules/@sveltejs/kit/src/utils/routing.js
function affects_path(segment) {
  return !/^\([^)]+\)$/.test(segment);
}
function get_route_segments(route) {
  return route.slice(1).split("/").filter(affects_path);
}

// node_modules/@sveltejs/kit/src/version.js
var VERSION = "1.25.2";

// node_modules/@sveltejs/kit/src/exports/index.js
function error(status, body) {
  if ((!BROWSER || DEV) && (isNaN(status) || status < 400 || status > 599)) {
    throw new Error(`HTTP error status codes must be between 400 and 599 â€” ${status} is invalid`);
  }
  return new HttpError(status, body);
}
function redirect(status, location) {
  if ((!BROWSER || DEV) && (isNaN(status) || status < 300 || status > 308)) {
    throw new Error("Invalid status code");
  }
  return new Redirect(status, location.toString());
}
function json(data, init) {
  const body = JSON.stringify(data);
  const headers = new Headers(init == null ? void 0 : init.headers);
  if (!headers.has("content-length")) {
    headers.set("content-length", encoder.encode(body).byteLength.toString());
  }
  if (!headers.has("content-type")) {
    headers.set("content-type", "application/json");
  }
  return new Response(body, {
    ...init,
    headers
  });
}
var encoder = new TextEncoder();
function text(body, init) {
  const headers = new Headers(init == null ? void 0 : init.headers);
  if (!headers.has("content-length")) {
    const encoded = encoder.encode(body);
    headers.set("content-length", encoded.byteLength.toString());
    return new Response(encoded, {
      ...init,
      headers
    });
  }
  return new Response(body, {
    ...init,
    headers
  });
}
function fail(status, data) {
  return new ActionFailure(status, data);
}
var basic_param_pattern = /\[(\[)?(\.\.\.)?(\w+?)(?:=(\w+))?\]\]?/g;
function resolvePath(id, params) {
  const segments = get_route_segments(id);
  return "/" + segments.map(
    (segment) => segment.replace(basic_param_pattern, (_, optional, rest, name) => {
      const param_value = params[name];
      if (!param_value) {
        if (optional)
          return "";
        if (rest && param_value !== void 0)
          return "";
        throw new Error(`Missing parameter '${name}' in route ${id}`);
      }
      if (param_value.startsWith("/") || param_value.endsWith("/"))
        throw new Error(
          `Parameter '${name}' in route ${id} cannot start or end with a slash -- this would cause an invalid route like foo//bar`
        );
      return param_value;
    })
  ).filter(Boolean).join("/");
}
export {
  VERSION,
  error,
  fail,
  json,
  redirect,
  resolvePath,
  text
};
//# sourceMappingURL=@sveltejs_kit.js.map
